from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.base import BaseStorage, StorageKey
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_all_users, get_sessions_count_today
import logging
import asyncio

scheduler = AsyncIOScheduler()
active_sessions = set()
muted_users = set()  # —é–∑–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å


# ‚è± –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
async def start_session_timer(user_id: int, bot: Bot, storage: BaseStorage):
    active_sessions.add(user_id)

    while True:
        print(f"[TIMER] –ñ–¥—ë–º 30 –º–∏–Ω—É—Ç –¥–ª—è user_id={user_id}")
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç

        if user_id not in active_sessions:
            print(f"[TIMER] –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è user_id={user_id}, —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break

        if user_id in muted_users:
            print(f"[TIMER] user_id={user_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            break

        key = StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id)
        data = await storage.get_data(key)
        current_state = data.get("state")
        print(f"[TIMER] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è user_id={user_id}, state={current_state}")

        await bot.send_message(
            user_id,
            "‚è∞ –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª –∑–∞–ø–∏—Å—å. –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_session")]
            ])
        )


# –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_session_timer(user_id: int, bot: Bot, storage: BaseStorage):
    asyncio.create_task(start_session_timer(user_id, bot, storage))


# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def mark_session_complete(user_id: int):
    active_sessions.discard(user_id)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π < 3 (—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å ‚Äî —É–±–µ—Ä–∏ —Ä–µ—à–µ—Ç–∫–∏ –Ω–∏–∂–µ)
    #
    # async def send_reminder(bot: Bot):
    #     users = await get_all_users()
    #     for user_id in users:
    #         if user_id in muted_users:
    #             logging.info(f"[REMINDER] user_id={user_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    #             continue
    #
    #         session_count = await get_sessions_count_today(user_id)
    #
    #         if session_count == 0:
    #             text = "—Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏"
    #         elif session_count == 1:
    #             text = "—Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 1 –∑–∞–ø–∏—Å—å"
    #         elif session_count == 2:
    #             text = "—Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 2 –∑–∞–ø–∏—Å–∏"
    #         else:
    #             logging.info(f"[REMINDER] ‚úÖ user_id={user_id} ‚Äî {session_count} –∑–∞–ø–∏—Å–µ–π, –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–º")
    #             continue
    #
    #         await bot.send_message(
    #             user_id,
    #             f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3. –ó–∞–ø–æ–ª–Ω–∏–º –∂—É—Ä–Ω–∞–ª? ü•∫",
    #             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    #                 [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", callback_data="new_entry")]
    #             ])
    #         )


# üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å 12:00, 16:00, 20:00 ‚Äî —É–±–µ—Ä–∏ —Ä–µ—à–µ—Ç–∫–∏ –Ω–∏–∂–µ)
#
# def start_scheduler(bot: Bot, dp: Dispatcher):
#     scheduler.add_job(
#         send_reminder,
#         trigger=CronTrigger(hour="12,16,20"),
#         args=[bot],
#         id="daily_reminders"
#     )
#     scheduler.start()

async def send_reminder(bot: Bot):
    users = await get_all_users()
    for user_id in users:
        if user_id in muted_users:
            logging.info(f"[REMINDER] user_id={user_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            continue
        await bot.send_message(
            user_id,
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∂—É—Ä–Ω–∞–ª üìù‚ù§Ô∏è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", callback_data="new_entry")]
            ])
        )


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def start_scheduler(bot: Bot, dp: Dispatcher):
    scheduler.add_job(
        send_reminder,
        trigger=CronTrigger(hour="9-20", minute=0),
        args=[bot],
        id="daily_reminders",
        misfire_grace_time=60
    )
    scheduler.start()
