# handlers/temperature.py
# FSM-–ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ—Ñ–µ–π–Ω–∏: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ‚Üí –∏–º—è ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from session_states import SessionState
from datetime import datetime
from database import save_temperature_entries
from scheduler import mark_session_complete

router = Router()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def device_type_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßä –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", callback_data="type:fridge")],
        [InlineKeyboardButton(text="‚ùÑÔ∏è –ú–æ—Ä–æ–∑–∏–ª–∫–∞", callback_data="type:freezer")]
    ])


# –ö–Ω–æ–ø–∫–∏ –î–∞ / –ù–µ—Ç
def yes_no_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_more"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="finish_devices")
        ]
    ])


# –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–≤—Ç–æ—Ä–Ω–æ
@router.message(F.text == "/start")
async def cmd_start_with_reminder(message: Message, state: FSMContext):
    data = await state.get_data()
    selected = data.get("coffee_code")

    if selected:
        await message.answer(
            f"üìç –¢—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å –∂—É—Ä–Ω–∞–ª –¥–ª—è: {selected}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ñ–µ–π–Ω—é", callback_data="restart")]
            ])
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=device_type_kb())
        await state.set_state(SessionState.choosing_device_type)
    else:
        from handlers.start import generate_coffee_keyboard
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–æ—Ñ–µ–π–Ω—é:", reply_markup=generate_coffee_keyboard(0))
        await state.set_state(SessionState.start)


# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@router.callback_query(F.data.startswith("type:"))
async def choose_device_type(callback: CallbackQuery, state: FSMContext):
    device_type = callback.data.split(":")[1]
    await state.update_data(current_type=device_type)
    await callback.message.answer("–í–≤–µ–¥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏):")
    await state.set_state(SessionState.entering_temperature)
    await callback.answer()


# –í–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@router.message(SessionState.entering_temperature)
async def get_temperature(message: Message, state: FSMContext):
    text = re.sub(r"(?<=[\-+])\s+", "", message.text.replace(",", ".").strip())
    try:
        temp = float(text)
    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 4.3 –∏–ª–∏ -18")
        return

    data = await state.get_data()
    device_type = data.get("current_type")

    if not device_type:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
        await state.set_state(SessionState.choosing_device_type)
        return

    entries = data.get("entries", [])
    fridge_count = data.get("fridge_count", 0)
    freezer_count = data.get("freezer_count", 0)

    if device_type == "fridge":
        fridge_count += 1
        number = fridge_count
    else:
        freezer_count += 1
        number = freezer_count

    entries.append({
        "type": device_type,
        "number": number,
        "temp": temp
    })

    await state.update_data(
        entries=entries,
        fridge_count=fridge_count,
        freezer_count=freezer_count,
        current_type=None
    )

    total = fridge_count + freezer_count
    if total < 3:
        await message.answer("–î–æ–±–∞–≤–∏–º –µ—â—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ü•∂", reply_markup=device_type_kb())
        await state.set_state(SessionState.choosing_device_type)
    else:
        await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?", reply_markup=yes_no_kb())
        await state.set_state(SessionState.confirming_continue)


# –ö–Ω–æ–ø–∫–∞ "–î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë"
@router.callback_query(F.data == "add_more")
async def add_more_devices(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=device_type_kb())
    await state.set_state(SessionState.choosing_device_type)
    await callback.answer()


# –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–º–µ–Ω–∏"
@router.callback_query(F.data == "finish_devices")
async def proceed_to_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
    await state.set_state(SessionState.entering_name)
    await callback.answer()


# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –±–∞—Ä–∏—Å—Ç–∞
@router.message(SessionState.entering_name)
async def handle_name(message: Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    name = f"{parts[0]} {parts[1]}"
    await state.update_data(barista_name=name)

    data = await state.get_data()
    coffee_code = data.get("coffee_code")

    if not coffee_code:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∫–æ—Ñ–µ–π–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return

    coffee_code = coffee_code.replace("–ú–æ—Å–∫–≤–∞ ", "")
    entries = data.get("entries", [])
    barista_name = data.get("barista_name")
    user_id = message.from_user.id

    now = datetime.now()
    session_date = now.date()
    session_time = now.time().replace(microsecond=0)

    await save_temperature_entries(
        user_id=user_id,
        barista_name=barista_name,
        coffee_code=coffee_code,
        entries=entries,
        session_date=session_date,
        session_time=session_time
    )

    mark_session_complete(user_id)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.\n–•–æ—Ä–æ—à–µ–π —Å–º–µ–Ω—ã ‚òïÔ∏è",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", callback_data="new_entry")]
                         ]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router.callback_query(F.data == "resume_session")
async def resume_session(callback: CallbackQuery, state: FSMContext):
    current = await state.get_state()

    if current == SessionState.choosing_device_type.state:
        await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=device_type_kb())
    elif current == SessionState.entering_temperature.state:
        await callback.message.answer("–í–≤–µ–¥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    elif current == SessionState.entering_name.state:
        await callback.message.answer("–í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
    elif current == SessionState.confirming_continue.state:
        await callback.message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?", reply_markup=yes_no_kb())
    else:
        await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.")

    await callback.answer()
