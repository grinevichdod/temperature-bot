# handlers/start.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—á–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç, –ø–ª—é—Å –≤—ã–±–æ—Ä –∫–æ—Ñ–µ–π–Ω–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from session_states import SessionState
from database import save_user_coffee, get_user_coffee
from scheduler import register_session_timer
from scheduler import mark_session_complete, muted_users
from database import remove_from_mute_users, add_to_mute_users


router = Router()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
COFFEE_LIST = [
    "–ú–æ—Å–∫–≤–∞ 0-1 (–û–º–µ–≥–∞ –ü–ª–∞–∑–∞)",
    "–ú–æ—Å–∫–≤–∞ 0-10 (–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å –ü–ª–∞–∑–∞)",
    "–ú–æ—Å–∫–≤–∞ 0-11 (–°–∏–º–æ–Ω–æ–≤ –ü–ª–∞–∑–∞)",
    "–ú–æ—Å–∫–≤–∞ 0-12 (–ê—Ä–º–∞)",
    "–ú–æ—Å–∫–≤–∞ 0-13 (–°–º–∞—Ä—Ç –ü–∞—Ä–∫)",
    "–ú–æ—Å–∫–≤–∞ 0-14 (–í–µ—Ä–µ–π—Å–∫–∞—è –ü–ª–∞–∑–∞)",
    "–ú–æ—Å–∫–≤–∞ 0-15 (–°—Ä–µ—Ç–µ–Ω–∫–∞)",
    "–ú–æ—Å–∫–≤–∞ 0-15.1 (–£—á–µ–±–Ω—ã–π –¶–µ–Ω—Ç—Ä)",
    "–ú–æ—Å–∫–≤–∞ 0-16.5 (–¢-–ë–∞–Ω–∫ | 5 —ç—Ç–∞–∂)",
    "–ú–æ—Å–∫–≤–∞ 0-16.7 (–¢-–ë–∞–Ω–∫ | 7 —ç—Ç–∞–∂)",
    "–ú–æ—Å–∫–≤–∞ 0-16.9 (–¢-–ë–∞–Ω–∫ | 9 —ç—Ç–∞–∂)",
    "–ú–æ—Å–∫–≤–∞ 0-17 (–•–ª–µ–±–æ–∑–∞–≤–æ–¥)",
    "–ú–æ—Å–∫–≤–∞ 0-18 (–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ –ü–∞—Å–∫–∞–ª—å)",
    "–ú–æ—Å–∫–≤–∞ 0-19 (–°–æ–ª–Ω—Ü–µ –ú–æ—Å–∫–≤—ã)",
    "–ú–æ—Å–∫–≤–∞ 0-2 (–°–∏—Ç–∏-–§–µ–¥–µ—Ä–∞—Ü–∏—è)",
    "–ú–æ—Å–∫–≤–∞ 0-21.4 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç | 4 —ç—Ç–∞–∂)",
    "–ú–æ—Å–∫–≤–∞ 0-21.8 (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç | 8 —ç—Ç–∞–∂)",
    "–ú–æ—Å–∫–≤–∞ 0-22 (–†–ò–û)",
    "–ú–æ—Å–∫–≤–∞ 0-23 (–í–≠–ë –¶–µ–Ω—Ç—Ä)",
    "–ú–æ—Å–∫–≤–∞ 0-24 (–ü–æ–∫–ª–æ–Ω–∫–∞ –ü–ª–µ–π—Å –û—Å—Ç—Ä–æ–≤)",
    "–ú–æ—Å–∫–≤–∞ 0-27 (–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ –ù–µ–º–µ—Ü–∫–∏–π —Ü–µ–Ω—Ç—Ä)",
    "–ú–æ—Å–∫–≤–∞ 0-3 (–î–∞–π–º–æ–Ω–¥ –•–æ–ª–ª)",
    "–ú–æ—Å–∫–≤–∞ 0-30 (–ê—Ñ–∏–º–æ–ª–ª –ì–∞–ª–µ—Ä–µ—è)"
]

PER_PAGE = 5
callback_on_select = None


def register_callback(callback):
    global callback_on_select
    callback_on_select = callback


# /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await remove_from_mute_users(message.from_user.id)
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤, –∑–∞—Ç–µ–º –º–æ—Ä–æ–∑–∏–ª–æ–∫.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞—é: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø—è—Ç—ã—Ö.\n\n"
        "–ù–∞—á–∏–Ω–∞–µ–º?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="start_session"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_session")
            ]
        ])
    )


@router.callback_query(F.data == "cancel_session")
async def cancel_session(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–£–≤–∏–¥–∏–º—Å—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑! üëã",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", callback_data="new_entry")]
        ])
    )
    await state.clear()
    await callback.answer()


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞—á–∞—Ç—å ‚Äî –µ—Å–ª–∏ –∫–æ—Ñ–µ–π–Ω—è —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º
@router.callback_query(F.data == "start_session")
async def start_session(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    muted_users.discard(user_id)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö
    coffee_code = await get_user_coffee(user_id)

    if coffee_code:
        await state.update_data(coffee_code=coffee_code)
        from handlers.temperature import device_type_kb
        await callback.message.answer(
            f"üìç –¢—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å –∂—É—Ä–Ω–∞–ª –¥–ª—è: {coffee_code}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ñ–µ–π–Ω—é", callback_data="restart")]
            ])
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=device_type_kb())
        await state.set_state(SessionState.choosing_device_type)
        await register_session_timer(user_id, callback.bot, state.storage)
    else:
        await state.set_state(SessionState.start)
        await callback.message.answer("–ò–∑ –∫–∞–∫–æ–π —Ç—ã –∫–æ—Ñ–µ–π–Ω–∏?", reply_markup=generate_coffee_keyboard(0))

    await callback.answer()


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ—Ñ–µ–µ–Ω

def generate_coffee_keyboard(page: int):
    start = page * PER_PAGE
    end = start + PER_PAGE
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"select_index:{i}")]
        for i, name in enumerate(COFFEE_LIST[start:end], start=start)
    ]
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if end < len(COFFEE_LIST):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page + 1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
@router.callback_query(F.data.startswith("page:"))
async def paginate_coffee_list(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await callback.message.edit_reply_markup(reply_markup=generate_coffee_keyboard(page))
    await callback.answer()


# –í—ã–±–æ—Ä –∫–æ—Ñ–µ–π–Ω–∏ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
@router.callback_query(F.data.startswith("select_index:"))
async def select_coffee(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split(":")[1])
    selected = COFFEE_LIST[index]
    await state.update_data(coffee_code=selected, entries=[], fridge_count=0, freezer_count=0)
    await save_user_coffee(callback.from_user.id, selected)

    await callback.message.edit_text(
        f"üìç <b>–¢—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å –∂—É—Ä–Ω–∞–ª –¥–ª—è:</b>\n{selected}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ñ–µ–π–Ω—é", callback_data="restart")]
        ])
    )

    from handlers.temperature import device_type_kb
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=device_type_kb())
    await state.set_state(SessionState.choosing_device_type)

    # await register_session_timer(callback.from_user.id, callback.bot, state.storage)

    if callback_on_select:
        await callback_on_select(callback.from_user.id)

    await callback.answer()


# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ñ–µ–π–Ω–∏
@router.callback_query(F.data == "restart")
async def restart_flow(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SessionState.start)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–æ—Ñ–µ–π–Ω—é:", reply_markup=generate_coffee_keyboard(0))
    await callback.answer()


# –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å ‚Äî –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ, –∫–∞–∫ —Å /start
@router.callback_query(F.data == "new_entry")
async def new_entry(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤, –∑–∞—Ç–µ–º –º–æ—Ä–æ–∑–∏–ª–æ–∫.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞—é: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø—è—Ç—ã—Ö.\n\n"
        "–ù–∞—á–∏–Ω–∞–µ–º?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="start_session"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_session")
            ]
        ])
    )

    await callback.answer()


@router.message(F.text == "/stop")
async def stop_notifications(message: Message):
    await add_to_mute_users(message.from_user.id)
    await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start.")
